#include <iostream>
#include <algorithm>

using namespace std; 

#define REP(i,a,b) \
	for (int i = int(a); i < int(b); i++) // a to b, i is local as usual 

#define INF 2000000000 // 2 billion 
//If you need to recall how to use memset 
#define MEMSET_INF 127 // about 2 B
#define MEMSET_INF_HALF 63 // about 1 B
//memset(dist, MEMSET_INF, sizeof dist); // useful for shortest path distances
//memset(dp_memo, -1, sizeof dp_memo); // useful to initialize DP memoization table
//memset(arr, 0, sizeof arr); 		// useful for clearing arrays of ints

int arrs1[5000]; 
int arrs2[5000]; 

int main() {
	int N; 
	cin >> N; 

	REP(i, 0, N){
		cin >> arrs1[i] >> arrs2[i]; 
	}

	sort(arrs1, arrs1+N); 
	sort(arrs2, arrs2+N); 

	int one = 0; //counter for arrs1
	int two = 0; //counter for arrs2
	int total = 0; 			//total # of farmers milking
	int cowMax = 0; 		// longest interval for milking cows
	int noCowMax = 0; 		//longest interval for which no cow was milked
	bool milking = false; 
	int startmilk;
	int endmilk = -1; 

	REP(i, 0, 2*N){
		if (one < N && arrs1[one] < arrs2[two]){  // another farmer begins milking
			total++; 
			if (!milking){				//begins milking
				startmilk = arrs1[one]; 
				milking = true; 
				if (endmilk != -1){
					if (startmilk - endmilk >noCowMax) noCowMax = startmilk-endmilk; 
				}
			}
			one++; 
		}
		else if (two < N-1 && arrs2[two] < arrs1[one]){
			total--; 
			if (total == 0){			//ends milking
				milking = false; 
				endmilk = arrs2[two]; 
				if (endmilk-startmilk > cowMax) cowMax = endmilk-startmilk; 
			}
			two++; 
		}
		else if (two == N-1){
			endmilk = arrs2[two]; 
			if (endmilk - startmilk > cowMax) cowMax = endmilk-startmilk; 
		}
		else { //two currente entries are equal
			one++; 
			two++; 
		}	
	}
	cout << cowMax << " " << noCowMax << endl; 
}
